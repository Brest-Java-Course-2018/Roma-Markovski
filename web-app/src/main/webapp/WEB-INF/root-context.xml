<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <import resource="sample-db-spring.xml"/>

    <!-- Use spring servlet for all requests, including static resources -->
    <mvc:default-servlet-handler/>

    <!-- Use @MVC annotations -->
    <mvc:annotation-driven />

    <!-- Component scan for @Controller, @Service... annotations -->
    <!--Authomatically searching for class with the upper annotations -->
    <context:component-scan base-package="com.epam.brest.course.*"/>

    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="publicationDao" class="com.epam.brest.course.dao.PublicationDaoImpl">
        <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate"/>
    </bean>

    <bean id="writerDao" class="com.epam.brest.course.dao.WriterDaoImpl">
        <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate"/>
    </bean>

    <!--<bean id="publicationService" class="com.epam.brest.course.service.PublicationServiceImpl">-->
        <!--<constructor-arg ref="publicationDao"/>-->
    <!--</bean>-->

    <!--<bean id="writerService" class="com.epam.brest.course.service.WriterServiceImpl">-->
        <!--<constructor-arg ref="writerDao"/>-->
    <!--</bean>-->

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
        <!--<property name="errorHandler" ref="customResponseHandler"/>-->
    </bean>

    <bean id="writerService" class="com.epam.brest.course.client.rest.WriterConsumerRest">
        <constructor-arg index="0" value="${protocol}://${host}:${port}/${point.writers}"/>
        <constructor-arg index="1" ref="restTemplate"/>
    </bean>

    <bean id="publicationService" class="com.epam.brest.course.client.rest.PublicationConsumerRest">
        <constructor-arg index="0" value="${protocol}://${host}:${port}/${point.publications}"/>
        <constructor-arg index="1" ref="restTemplate"/>
    </bean>

    <!-- Thymeleaf Template Resolver -->
    <bean id="templateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/templates/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML" />
    </bean>

    <!-- Thymeleaf Template Engine (Spring4-specific version) -->
    <bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolvers">
            <set>
                <ref bean="templateResolver" />
            </set>
        </property>
    </bean>

    <!-- Thymeleaf View Resolver - implementation of Spring's ViewResolver interface -->
    <bean id="viewResolver" class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="characterEncoding" value="UTF-8" />
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:sql.properties</value>
                <value>classpath:application.properties</value>
                <value>classpath:rest.properties</value>
            </list>
        </property>
    </bean>

</beans>